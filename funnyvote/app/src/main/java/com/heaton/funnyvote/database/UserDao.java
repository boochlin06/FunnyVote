package com.heaton.funnyvote.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property Email = new Property(2, String.class, "email", false, "EMAIL");
        public final static Property UserID = new Property(3, String.class, "userID", false, "USER_ID");
        public final static Property UserCode = new Property(4, String.class, "userCode", false, "USER_CODE");
        public final static Property UserIcon = new Property(5, String.class, "userIcon", false, "USER_ICON");
        public final static Property Type = new Property(6, int.class, "type", false, "TYPE");
        public final static Property Gender = new Property(7, String.class, "gender", false, "GENDER");
        public final static Property MinAge = new Property(8, int.class, "minAge", false, "MIN_AGE");
        public final static Property MaxAge = new Property(9, int.class, "maxAge", false, "MAX_AGE");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"EMAIL\" TEXT," + // 2: email
                "\"USER_ID\" TEXT," + // 3: userID
                "\"USER_CODE\" TEXT," + // 4: userCode
                "\"USER_ICON\" TEXT," + // 5: userIcon
                "\"TYPE\" INTEGER NOT NULL ," + // 6: type
                "\"GENDER\" TEXT," + // 7: gender
                "\"MIN_AGE\" INTEGER NOT NULL ," + // 8: minAge
                "\"MAX_AGE\" INTEGER NOT NULL );"); // 9: maxAge
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(3, email);
        }
 
        String userID = entity.getUserID();
        if (userID != null) {
            stmt.bindString(4, userID);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(5, userCode);
        }
 
        String userIcon = entity.getUserIcon();
        if (userIcon != null) {
            stmt.bindString(6, userIcon);
        }
        stmt.bindLong(7, entity.getType());
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(8, gender);
        }
        stmt.bindLong(9, entity.getMinAge());
        stmt.bindLong(10, entity.getMaxAge());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(3, email);
        }
 
        String userID = entity.getUserID();
        if (userID != null) {
            stmt.bindString(4, userID);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(5, userCode);
        }
 
        String userIcon = entity.getUserIcon();
        if (userIcon != null) {
            stmt.bindString(6, userIcon);
        }
        stmt.bindLong(7, entity.getType());
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(8, gender);
        }
        stmt.bindLong(9, entity.getMinAge());
        stmt.bindLong(10, entity.getMaxAge());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // email
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userIcon
            cursor.getInt(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // gender
            cursor.getInt(offset + 8), // minAge
            cursor.getInt(offset + 9) // maxAge
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEmail(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserIcon(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.getInt(offset + 6));
        entity.setGender(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMinAge(cursor.getInt(offset + 8));
        entity.setMaxAge(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
